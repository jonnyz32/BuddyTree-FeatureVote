{"version":3,"sources":["assets/thumbsUpBlack.png","assets/thumbsUp.png","AddFeature.tsx","ServerRequests.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["AddFeature","path","window","location","pathname","console","log","useState","votes","setVotes","featureText","setFeatureText","modifyVotes","index","newVotes","image","data","feature","fetch","method","headers","body","then","res","json","catch","error","modifyVotesReq","JSON","stringify","alert","useEffect","arr","forEach","element","push","className","rows","id","value","onChange","event","target","handleTextChange","onClick","newFeature","featureAdd","map","i","alt","src","blueThumb","blackThumb","App","style","display","position","left","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1371082c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/thumbsUpBlack.bcad8471.png\";","export default __webpack_public_path__ + \"static/media/thumbsUp.9be3da83.png\";","import './App.css';\r\nimport './AddFeature.css';\r\nimport {useState, useEffect} from 'react';\r\nimport blackThumb from './assets/thumbsUpBlack.png';\r\nimport blueThumb from './assets/thumbsUp.png';\r\nimport {modifyVotesReq, featureAdd} from './ServerRequests';\r\n\r\nfunction AddFeature() {\r\n    // All features with their votes\r\n    let path = window.location.pathname;\r\n    if (path === '/'){\r\n        path = ''\r\n    }\r\n    \r\n    {console.log(\"path: \", path)}\r\n    const [votes, setVotes] = useState<any[]>([]);\r\n\r\n    // The current input text\r\n    const [featureText, setFeatureText] = useState(\"\");\r\n\r\n    /* Increase or decrease the votes for the specified feature*/ \r\n    const modifyVotes = (index) => {\r\n        if (path == \"\"){\r\n            alert(\"Only users can vote on features\")\r\n            return\r\n        }\r\n\r\n        // Create the new votes array for updated state\r\n        let newVotes = [...votes]\r\n\r\n        // Switch between blue and black thumbs up image\r\n        newVotes[index].image = (newVotes[index].image + 1) % 2;\r\n\r\n        // Prepare the data for fetch request to modify votes in the db\r\n        const data = {feature: newVotes[index].feature}\r\n\r\n        if (newVotes[index].image === 0){\r\n            // If the thumbs up is now black, then decrease the votes by one\r\n            newVotes[index].votes -= 1\r\n\r\n            data[\"direction\"] = \"decrease\"\r\n\r\n            // Send request to server to decrease votes in db\r\n            // decreaseVotesReq(JSON.stringify(data))\r\n\r\n        }\r\n        else {\r\n            // Thumbs up must be blue now, so we increase votes by one\r\n            newVotes[index].votes += 1\r\n\r\n            data[\"direction\"] = \"increase\"\r\n\r\n\r\n            // Send request to server to increase votes in db\r\n            // increaseVotesReq(JSON.stringify(data))\r\n        }\r\n\r\n        modifyVotesReq(JSON.stringify(data), path)\r\n\r\n        // Update the state with the new votes array\r\n        setVotes(newVotes)\r\n\r\n      \r\n    }\r\n\r\n    // Update the state with the current text input as user types\r\n    const handleTextChange = (event) => {\r\n        setFeatureText(event.target.value)\r\n       \r\n    }\r\n\r\n    // Add a new feature to be polled\r\n    const submitNewFeature = () => {\r\n        if (path == \"\"){\r\n            alert(\"Only users can add features\")\r\n            return\r\n        }\r\n\r\n        // Create new votes array\r\n        let newVotes = [...votes]\r\n\r\n        // Create new feature to be added\r\n        let newFeature = {\r\n            \"feature\": featureText,\r\n            \"votes\": 0,\r\n            \"image\": 0,\r\n        }\r\n        newVotes.push(newFeature)\r\n\r\n        // Set state with new votes array\r\n        setVotes(newVotes)\r\n\r\n        // Reset feature text\r\n        setFeatureText(\"\")\r\n\r\n        // Send new feature to server to be added to database\r\n        const data = {feature: featureText}\r\n        featureAdd(JSON.stringify(data), path)\r\n    }\r\n\r\n    /* Fetch features and votes from the db on startup */\r\n    const fetchVotes = () => {\r\n        fetch(\"/getVotes\" + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }).then(res => {\r\n                return res.json()\r\n        })\r\n            .then(arr => {\r\n                // Populate newVotes array with response object and set state\r\n                let newVotes = [] as any;\t\r\n                arr[0].forEach(element => {\r\n                    if( element.feature in arr[1] ){\r\n                        element[\"image\"] = 1\r\n                    } else {\r\n                        element[\"image\"] = 0\r\n                    }\r\n                    newVotes.push(element)\r\n                });\t\t\r\n                setVotes(newVotes);\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }\r\n\r\n    // Fetch the currently polled features from db after DOM renders\r\n    useEffect(fetchVotes, [])\r\n\r\n\r\n\r\n  return ( \r\n    <div className=\"Container\"> \r\n        <p>What new feature would you<br/>like us to add to Buddytree?</p>\r\n        <div className=\"FeatureSuggestion\">\r\n            <textarea rows={2} id=\"inputFeature\" value={featureText} \r\n            onChange={(event) => handleTextChange(event)}></textarea>\r\n            <button id=\"addFeature\"onClick={submitNewFeature}>Add</button>\r\n        </div>\r\n        \r\n        <div className=\"FeatureVotes\">\r\n            {votes.map((feature, i) => (\r\n                <div key={feature.feature} className=\"FeatureItemContainer\">\r\n                    <div className=\"FeatureItem\">\r\n                        {feature.feature}\r\n                    </div>                     \r\n                    {feature.image ? \r\n                    <img id=\"thumb\" alt=\"blueThumb\" src={blueThumb} onClick={()=>{modifyVotes(i)}}/> :\r\n                    <img id=\"thumb\" alt=\"blackThumb\" src={blackThumb} onClick={()=>{modifyVotes(i)}}/>}\r\n                    <h2 id=\"numVotes\">{feature.votes}</h2>\r\n                </div>))}\r\n        </div>\r\n    </div>\r\n    \r\n    \r\n  );\r\n}\r\n\r\nexport default AddFeature;\r\n","\r\n/* Send request to server to increase or decrease votes in\r\n   the database for a given feature */\r\nexport const modifyVotesReq = (data, path) => {\r\n\r\n    fetch(\"/featureModifyVotes\" + path, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: data,\r\n    }).then(res => {\r\n        return res.json()\r\n    }).catch(error => {\r\n        console.log(error)\r\n    })\r\n\r\n}\r\n\r\n/* Send request to server to add a new feature in\r\n   the database */\r\nexport const featureAdd = (data, path) => {\r\n    \r\n    fetch(\"/featureAdd\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: data,\r\n    }).then(res => {\r\n            return res.json()\r\n    }).catch(error => {\r\n        console.log(error)\r\n    })\r\n\r\n}","import './App.css';\nimport './AddFeature.tsx';\nimport AddFeature from './AddFeature';\n\n\n\nfunction App() {\n  return (\n    <div style={{display:\"inline-block\", position:\"absolute\", left:\"500px\"}}>\n          <AddFeature/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}